{
  "name": "Snakemake",
  "scopeName": "source.python.snakemake",
  "fileTypes": [
    "Snakefile",
    "smk"
  ],
  "patterns": [
    {
      "include": "#quotessmall"
    },
    {
      "include": "#quotesmid"
    },
    {
      "include": "#quotesbig"
    },
    {
      "include": "#configs"
    },
    {
      "include": "#rules"
    },
    {
      "include": "#modules"
    },
    {
      "include": "#useruleas"
    },
    {
      "include": "#userulefromas"
    },
    {
      "include": "#userulesfrom"
    },
    {
      "include": "#ruleparams"
    },
    {
      "include": "#rulerunparams"
    },
    {
      "include": "#moduleparams"
    },
    {
      "include": "#classes"
    },
    {
      "include": "#object"
    },
    {
      "include": "#ruleargargs"
    },
    {
      "include": "#ruleargs"
    },
    {
      "include": "#functions"
    },
    {
      "include": "source.python"
    }
  ],
  "repository": {
    "quotessmall": {
      "begin": "\\(",
      "end": "\\)",
      "patterns": [
        {
          "include": "#quotessmall"
        },
        {
          "include": "#quotesmid"
        },
        {
          "include": "#quotesbig"
        },
        {
          "include": "#classes"
        },
        {
          "include": "#object"
        },
        {
          "include": "#ruleargargs"
        },
        {
          "include": "#ruleargs"
        },
        {
          "include": "#functions"
        },
        {
          "include": "source.python"
        }
      ]
    },
    "quotesmid": {
      "begin": "\\[",
      "end": "\\]",
      "patterns": [
        {
          "include": "#quotessmall"
        },
        {
          "include": "#quotesmid"
        },
        {
          "include": "#quotesbig"
        },
        {
          "include": "#classes"
        },
        {
          "include": "#object"
        },
        {
          "include": "#ruleargargs"
        },
        {
          "include": "#ruleargs"
        },
        {
          "include": "#functions"
        },
        {
          "include": "source.python"
        }
      ]
    },
    "quotesbig": {
      "begin": "\\{",
      "end": "\\}",
      "patterns": [
        {
          "include": "#quotessmall"
        },
        {
          "include": "#quotesmid"
        },
        {
          "include": "#quotesbig"
        },
        {
          "include": "#classes"
        },
        {
          "include": "#object"
        },
        {
          "include": "#ruleargargs"
        },
        {
          "include": "#ruleargs"
        },
        {
          "include": "#functions"
        },
        {
          "include": "source.python"
        }
      ]
    },
    "configs": {
      "match": "(?x)\n  ^\\s* # Leading whitespace\n  (envvars|include|workdir|configfile|pepfile|pepschema|report|ruleorder|localrules|onsuccess|onerror|onstart|wildcard_constraints|singularity|container|containerized|conda|scattergather|inputflags|outputflags|storage|resource_scopes) # Keywords\n  : # Ending in colon\n",
      "captures": {
        "1": {
          "name": "keyword.control.snakemake.config"
        }
      }
    },
    "rules": {
      "match": "(?x)\n  ^\\s* # Leading whitespace\n  (checkpoint|rule) # Keywords\n  (?:\\s+(\\w+))? # Optional rule name\n  : # Ending in colon\n",
      "captures": {
        "1": {
          "name": "keyword.control.snakemake"
        },
        "2": {
          "name": "entity.name.function.snakemake.rule"
        }
      }
    },
    "modules": {
      "match": "(?x)\n  ^\\s* # Leading whitespace\n  (module|subworkflow) # Keywords\n  (?:\\s+(\\w+))? # Optional rule name\n  : # Ending in colon\n",
      "captures": {
        "1": {
          "name": "keyword.control.snakemake"
        },
        "2": {
          "name": "entity.name.type.snakemake.rule"
        }
      }
    },
    "useruleas": {
      "match": "(?x)\n  \\b(use\\s+rule)\\s+(\\w+)\\s+(as)\\s+(\\w+)\\s+(with)\n  : # Ending in colon\n",
      "captures": {
        "1": {
          "name": "keyword.control.snakemake"
        },
        "2": {
          "name": "entity.name.function.snakemake.rule"
        },
        "3": {
          "name": "keyword.control.snakemake"
        },
        "4": {
          "name": "entity.name.function.snakemake.rule"
        },
        "5": {
          "name": "keyword.control.snakemake"
        }
      }
    },
    "userulesfromas": {
      "match": "(?x)\n  \\b(use\\s+rule)\\s+(\\w+|\\w+\\*|\\*)\\s+(from)\\s+(\\w+)\\s+(as)\\s+(\\w+|\\w+\\*)\n",
      "captures": {
        "1": {
          "name": "keyword.control.snakemake"
        },
        "2": {
          "name": "entity.name.function.snakemake.rule"
        },
        "3": {
          "name": "keyword.control.snakemake"
        },
        "4": {
          "name": "entity.name.type.snakemake.rule"
        },
        "5": {
          "name": "keyword.control.snakemake"
        },
        "6": {
          "name": "entity.name.function.snakemake.rule"
        }
      }
    },
    "userulesfrom": {
      "match": "(?x)\n  \\b(use\\s+rule)\\s+(\\w+|\\w+\\*|\\*)\\s+(from)\\s+(\\w+)\n",
      "captures": {
        "1": {
          "name": "keyword.control.snakemake"
        },
        "2": {
          "name": "entity.name.function.snakemake.rule"
        },
        "3": {
          "name": "keyword.control.snakemake"
        },
        "4": {
          "name": "entity.name.type.snakemake.rule"
        }
      }
    },
    "ruleparams": {
      "match": "(?x)\n  ^\\s* # Leading whitespace\n  (name|input|output|params|threads|resources|retries|priority|log|message|benchmark|conda|singularity|container|containerized|envmodules|wildcard_constraints|shadow|group|cache|handover|default_target|localrule|version|container_img|is_containerized|shellcmd|norun|conda_env|env_modules|shadow_depth|docstring|path_modifier) # Keywords\n  : # Ending in colon\n",
      "captures": {
        "1": {
          "name": "keyword.control.snakemake.ruleparam"
        }
      }
    },
    "rulerunparams": {
      "match": "(?x)\n  ^\\s* # Leading whitespace\n  (run|shell|script|notebook|wrapper|template_engine|cwl) # Keywords\n  : # Ending in colon\n",
      "captures": {
        "1": {
          "name": "keyword.control.snakemake.rulerunparam"
        }
      }
    },
    "moduleparams": {
      "match": "(?x)\n  ^\\s* # Leading whitespace\n  (name|snakefile|meta_wrapper|config|skip_validation|replace_prefix|prefix) # Keywords\n  : # Ending in colon\n",
      "captures": {
        "1": {
          "name": "keyword.control.snakemake.moduleparam"
        }
      }
    },
    "classes": {
      "match": "\\b(Path|WorkflowError)\\b(?!\\s*=)",
      "captures": {
        "1": {
          "name": "entity.name.type.class.snakemake"
        }
      }
    },
    "objects": {
      "match": "\\b(snakemake|rules|workflow|checkpoints|storage|access|scatter|gather)\\b(?!\\s*=)",
      "captures": {
        "1": {
          "name": "entity.name.type.class.snakemake"
        }
      }
    },
    "ruleargargs": {
      "match": "\\b(input|output|params|wildcards|threads|resources|log|config)\\s*\\.\\s*([A-Za-z_]+)\\b(?!\\s*=)",
      "captures": {
        "1": {
          "name": "entity.name.variable.snakemake"
        },
        "2": {
          "name": "entity.name.variable.snakemake"
        }
      }
    },
    "ruleargs": {
      "match": "\\b(input|output|params|wildcards|threads|resources|log|config)\\b(?!\\s*=)",
      "captures": {
        "1": {
          "name": "entity.name.variable.snakemake"
        }
      }
    },
    "functions": {
      "match": "\\b(shell|github|gitlab|gitfile|from_queue|protected|temp|temporary|ancient|directory|expand|glob_wildcards|flag|touch|unpack|local|pipe|service|repeat|report|multiext|ensure|update|before_update|lookup|evaluate|branch|collect|exists|subpath|parse_input|extract_checksum|flatten)\\b(?!\\s*=)",
      "captures": {
        "1": {
          "name": "support.function.builtin.snakemake"
        }
      }
    },
    "shell_block": {
      "begin": "^\\s+shell:\\s*\\n*\\s*\\\"\\\"\\\"",
      "end": "\\\"\\\"\\\"",
      "patterns": [
        {
          "include": "source.shell"
        }
      ]
    }
  }
}
