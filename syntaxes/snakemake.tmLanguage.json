{
  "name": "Snakemake",
  "scopeName": "source.python.snakemake",
  "fileTypes": [
    "Snakefile",
    "smk"
  ],
  "patterns": [
    {
      "include": "#snakestrings"
    },
    {
      "include": "#shellzone"
    },
    {
      "include": "#configs"
    },
    {
      "include": "#rules"
    },
    {
      "include": "#modules"
    },
    {
      "include": "#useruleas"
    },
    {
      "include": "#userulefromas"
    },
    {
      "include": "#userulesfrom"
    },
    {
      "include": "#ruleparams"
    },
    {
      "include": "#rulerunparams"
    },
    {
      "include": "#moduleparams"
    },
    {
      "include": "#function-call"
    },
    {
      "include": "#quoteall"
    },
    {
      "include": "#snakemakenames"
    },
    {
      "include": "source.python"
    }
  ],
  "repository": {
    "function-call": {
      "name": "meta.function-call.snakemake",
      "comment": "Regular function call of the type \"name(args)\" in snakemake",
      "begin": "(?x)\n  \\b(?=\n    ([[:alpha:]_]\\w*) \\s* (\\()\n  )\n",
      "end": "(\\))",
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.arguments.end.python"
        }
      },
      "patterns": [
        {
          "include": "#classes"
        },
        {
          "include": "#functions"
        },
        {
          "include": "source.python#special-variables"
        },
        {
          "include": "source.python#function-name"
        },
        {
          "include": "#function-arguments"
        }
      ]
    },
    "function-arguments": {
      "begin": "(\\()",
      "end": "(?=\\))(?!\\)\\s*\\()",
      "beginCaptures": {
        "1": {
          "name": "punctuation.definition.arguments.begin.python"
        }
      },
      "contentName": "meta.function-call.arguments.python",
      "patterns": [
        {
          "name": "punctuation.separator.arguments.python",
          "match": "(,)"
        },
        {
          "match": "(?x)\n  (?:(?<=[,(])|^) \\s* (\\*{1,2})\n",
          "captures": {
            "1": {
              "name": "keyword.operator.unpacking.arguments.python"
            }
          }
        },
        {
          "include": "#snakemakenames"
        },
        {
          "include": "source.python#lambda-incomplete"
        },
        {
          "include": "source.python#illegal-names"
        },
        {
          "match": "\\b([[:alpha:]_]\\w*)\\s*(=)(?!=)",
          "captures": {
            "1": {
              "name": "variable.parameter.function-call.python"
            },
            "2": {
              "name": "keyword.operator.assignment.python"
            }
          }
        },
        {
          "name": "keyword.operator.assignment.python",
          "match": "=(?!=)"
        },
        {
          "include": "#snakemakenames"
        },
        {
          "include": "#quoteall"
        },
        {
          "include": "source.python#expression"
        },
        {
          "match": "\\s*(\\))\\s*(\\()",
          "captures": {
            "1": {
              "name": "punctuation.definition.arguments.end.python"
            },
            "2": {
              "name": "punctuation.definition.arguments.begin.python"
            }
          }
        }
      ]
    },
    "quoteall": {
      "patterns": [
        {
          "include": "#quotessmall"
        },
        {
          "include": "#quotesmid"
        },
        {
          "include": "#quotesbig"
        }
      ]
    },
    "quotessmall": {
      "begin": "\\(",
      "end": "\\)",
      "patterns": [
        {
          "include": "#quoteall"
        },
        {
          "include": "#snakemakenames"
        },
        {
          "include": "source.python"
        }
      ]
    },
    "quotesmid": {
      "begin": "\\[",
      "end": "\\]",
      "patterns": [
        {
          "include": "#quoteall"
        },
        {
          "include": "#snakemakenames"
        },
        {
          "include": "source.python"
        }
      ]
    },
    "quotesbig": {
      "begin": "\\{",
      "end": "\\}",
      "patterns": [
        {
          "include": "#quoteall"
        },
        {
          "include": "#snakemakenames"
        },
        {
          "include": "source.python"
        }
      ]
    },
    "configs": {
      "match": "(?x)\n  ^\\s* # Leading whitespace\n  (envvars|include|workdir|configfile|pepfile|pepschema|report|ruleorder|localrules|onsuccess|onerror|onstart|wildcard_constraints|singularity|container|containerized|conda|scattergather|inputflags|outputflags|storage|resource_scopes) # Keywords\n  : # Ending in colon\n",
      "captures": {
        "1": {
          "name": "keyword.control.snakemake.config"
        }
      }
    },
    "rules": {
      "match": "(?x)\n  ^\\s* # Leading whitespace\n  (checkpoint|rule) # Keywords\n  (?:\\s+(\\w+))? # Optional rule name\n  : # Ending in colon\n",
      "captures": {
        "1": {
          "name": "keyword.control.snakemake"
        },
        "2": {
          "name": "entity.name.function.snakemake.rule"
        }
      }
    },
    "modules": {
      "match": "(?x)\n  ^\\s* # Leading whitespace\n  (module|subworkflow) # Keywords\n  (?:\\s+(\\w+))? # Optional rule name\n  : # Ending in colon\n",
      "captures": {
        "1": {
          "name": "keyword.control.snakemake"
        },
        "2": {
          "name": "entity.name.type.snakemake.rule"
        }
      }
    },
    "useruleas": {
      "match": "(?x)\n  \\b(use\\s+rule)\\s+(\\w+)\\s+(as)\\s+(\\w+)\\s+(with)\n  : # Ending in colon\n",
      "captures": {
        "1": {
          "name": "keyword.control.snakemake"
        },
        "2": {
          "name": "entity.name.function.snakemake.rule"
        },
        "3": {
          "name": "keyword.control.snakemake"
        },
        "4": {
          "name": "entity.name.function.snakemake.rule"
        },
        "5": {
          "name": "keyword.control.snakemake"
        }
      }
    },
    "userulesfromas": {
      "match": "(?x)\n  \\b(use\\s+rule)\\s+(\\w+|\\w+\\*|\\*)\\s+(from)\\s+(\\w+)\\s+(as)\\s+(\\w+|\\w+\\*)\n  # may end with a \"with:\"\", but that can be caught by other rules\n",
      "captures": {
        "1": {
          "name": "keyword.control.snakemake"
        },
        "2": {
          "name": "entity.name.function.snakemake.rule"
        },
        "3": {
          "name": "keyword.control.snakemake"
        },
        "4": {
          "name": "entity.name.type.snakemake.rule"
        },
        "5": {
          "name": "keyword.control.snakemake"
        },
        "6": {
          "name": "entity.name.function.snakemake.rule"
        }
      }
    },
    "userulesfrom": {
      "match": "\\b(use\\s+rule)\\s+(\\w+|\\w+\\*|\\*)\\s+(from)\\s+(\\w+)",
      "captures": {
        "1": {
          "name": "keyword.control.snakemake"
        },
        "2": {
          "name": "entity.name.function.snakemake.rule"
        },
        "3": {
          "name": "keyword.control.snakemake"
        },
        "4": {
          "name": "entity.name.type.snakemake.rule"
        }
      }
    },
    "ruleparams": {
      "match": "(?x)\n  ^\\s* # Leading whitespace\n  (name|input|output|params|threads|resources|retries|priority|log|message|benchmark|conda|singularity|container|containerized|envmodules|wildcard_constraints|shadow|group|cache|handover|default_target|localrule|version|container_img|is_containerized|shellcmd|norun|conda_env|env_modules|shadow_depth|docstring|path_modifier) # Keywords\n  : # Ending in colon\n",
      "captures": {
        "1": {
          "name": "keyword.control.snakemake.ruleparam"
        }
      }
    },
    "rulerunparams": {
      "match": "(?x)\n  ^\\s* # Leading whitespace\n  (run|shell|script|notebook|wrapper|template_engine|cwl) # Keywords\n  : # Ending in colon\n",
      "captures": {
        "1": {
          "name": "keyword.control.snakemake.rulerunparam"
        }
      }
    },
    "moduleparams": {
      "match": "(?x)\n  ^\\s* # Leading whitespace\n  (name|snakefile|meta_wrapper|config|skip_validation|replace_prefix|prefix) # Keywords\n  : # Ending in colon\n",
      "captures": {
        "1": {
          "name": "keyword.control.snakemake.moduleparam"
        }
      }
    },
    "snakemakenames": {
      "patterns": [
        {
          "include": "#classes"
        },
        {
          "include": "#rulesrefernce"
        },
        {
          "include": "#objects"
        },
        {
          "include": "#ruleargargs"
        },
        {
          "include": "#ruleargs"
        },
        {
          "include": "#functions"
        }
      ]
    },
    "classes": {
      "match": "\\b(Path|WorkflowError)\\b(?!\\s*=)",
      "captures": {
        "1": {
          "name": "entity.name.type.class.snakemake"
        }
      }
    },
    "rulesrefernce": {
      "name": "meta.class.snakemake",
      "match": "\\b(rules|checkpoints)\\s*\\.\\s*([A-Za-z_]+)\\b(?!\\s*=)",
      "captures": {
        "1": {
          "name": "entity.name.type.class.snakemake"
        },
        "2": {
          "name": "entity.name.variable.snakemake"
        }
      }
    },
    "objects": {
      "name": "meta.c",
      "match": "\\b(snakemake|rules|workflow|checkpoints|storage|access|scatter|gather)\\b(?!\\s*=)",
      "captures": {
        "1": {
          "name": "entity.name.type.class.snakemake"
        }
      }
    },
    "ruleargargs": {
      "name": "meta.args.snakemake",
      "match": "\\b(input|output|params|wildcards|threads|resources|log|config)\\s*\\.\\s*([A-Za-z_]+)\\b(?!\\s*=)",
      "captures": {
        "1": {
          "name": "constant.language.snakemake"
        },
        "2": {
          "name": "entity.name.variable.snakemake"
        }
      }
    },
    "ruleargs": {
      "match": "\\b(input|output|params|wildcards|threads|resources|log|config)\\b(?!\\s*=)",
      "captures": {
        "1": {
          "name": "constant.language.snakemake"
        }
      }
    },
    "functions": {
      "match": "\\b(shell|github|gitlab|gitfile|from_queue|protected|temp|temporary|ancient|directory|expand|glob_wildcards|flag|touch|unpack|local|pipe|service|repeat|report|multiext|ensure|update|before_update|lookup|evaluate|branch|collect|exists|subpath|parse_input|extract_checksum|flatten)\\b(?!\\s*=)",
      "captures": {
        "1": {
          "name": "support.function.builtin.snakemake"
        }
      }
    },
    "snakestrings": {
      "name": "string.quoted.docstring.snakemake",
      "begin": "\\s+(\\'\\'\\'|\\\"\\\"\\\"|\\'|\\\")",
      "end": "(\\1)",
      "beginCaptures": {
        "1": {
          "name": "punctuation.definition.string.begin.python"
        }
      },
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.string.end.python"
        }
      },
      "patterns": [
        {
          "include": "source.python#string-single-bad-brace1-formatting-unicode"
        },
        {
          "include": "source.python#string-single-bad-brace2-formatting-unicode"
        },
        {
          "include": "source.python#string-unicode-guts"
        },
        {
          "include": "#quotesbig"
        }
      ]
    },
    "shell_initial_context": {
      "name": "string.quoted.docstring.shell.snakemake",
      "patterns": [
        {
          "include": "#quotesbig"
        },
        {
          "include": "source.shell#comment"
        },
        {
          "include": "source.shell#pipeline"
        },
        {
          "include": "source.shell#normal_statement_seperator"
        },
        {
          "include": "source.shell#logical_expression_double"
        },
        {
          "include": "source.shell#logical_expression_single"
        },
        {
          "include": "source.shell#assignment_statement"
        },
        {
          "include": "source.shell#case_statement"
        },
        {
          "include": "source.shell#for_statement"
        },
        {
          "include": "source.shell#loop"
        },
        {
          "include": "source.shell#function_definition"
        },
        {
          "include": "source.shell#line_continuation"
        },
        {
          "include": "source.shell#arithmetic_double"
        },
        {
          "include": "source.shell#misc_ranges"
        },
        {
          "include": "source.shell#variable"
        },
        {
          "include": "source.shell#interpolation"
        },
        {
          "include": "source.shell#heredoc"
        },
        {
          "include": "source.shell#herestring"
        },
        {
          "include": "source.shell#redirection"
        },
        {
          "include": "source.shell#pathname"
        },
        {
          "include": "source.shell#floating_keyword"
        },
        {
          "include": "source.shell#alias_statement"
        },
        {
          "include": "source.shell#normal_statement"
        },
        {
          "include": "#source.shell.string"
        },
        {
          "include": "source.shell#support"
        },
        {
          "name": null
        }
      ]
    },
    "source.shell.string": {
      "name": "meta.embedded.shell.notpython.snakemake",
      "patterns": [
        {
          "match": "\\\\",
          "name": "constant.character.escape.shell"
        },
        {
          "name": "string.quoted.single.shell",
          "begin": "(?!\\'\\'\\')\\'",
          "end": "\\'",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.shell"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.shell"
            }
          }
        },
        {
          "name": "string.quoted.double.shell",
          "begin": "\\$?(?!\"\"\")\"",
          "end": "\"",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.shell"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.shell"
            }
          },
          "patterns": [
            {
              "match": "\\\\[\\$\\n`\"\\\\]",
              "name": "constant.character.escape.shell"
            },
            {
              "include": "source.shell#variable"
            },
            {
              "include": "source.shell#interpolation"
            }
          ]
        },
        {
          "name": "string.quoted.single.dollar.shell",
          "begin": "\\$'",
          "end": "'",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.shell"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.shell"
            }
          },
          "patterns": [
            {
              "name": "constant.character.escape.ansi-c.shell",
              "match": "\\\\(?:a|b|e|f|n|r|t|v|\\\\|')"
            },
            {
              "name": "constant.character.escape.octal.shell",
              "match": "\\\\[0-9]{3}\""
            },
            {
              "name": "constant.character.escape.hex.shell",
              "match": "\\\\x[0-9a-fA-F]{2}\""
            },
            {
              "name": "constant.character.escape.control-char.shell",
              "match": "\\\\c.\""
            }
          ]
        }
      ]
    },
    "shellzone": {
      "name": "meta.embedded.shell.snakemake",
      "begin": "^(\\s+)\\s(shell)\\s*:",
      "beginCaptures": {
        "2": {
          "name": "entity.name.type.class.snakemake"
        }
      },
      "while": "^(\\1|$)",
      "patterns": [
        {
          "include": "#shell_initial_context"
        }
      ]
    }
  }
}
