---
name: Snakemake
scopeName: source.python.snakemake
fileTypes: [Snakefile, smk]

patterns:
  - include: "#snakestrings"
  - include: "#configs"
  - include: "#rules"
  - include: "#modules"
  - include: "#useruleas"
  - include: "#userulefromas"
  - include: "#userulesfrom"
  - include: "#ruleparams"
  - include: "#rulerunparams"
  - include: "#moduleparams"
  - include: "#function-call"
  - include: "#quoteall"
  - include: "#snakemakenames"
  - include: source.python

repository:
  function-call:
    name: meta.function-call.snakemake
    comment: Regular function call of the type "name(args)" in snakemake
    begin: |
      (?x)
        \b(?=
          ([[:alpha:]_]\w*) \s* (\()
        )
    end: (\))
    endCaptures:
      "1": { name: punctuation.definition.arguments.end.python }
    patterns:
      - include: "#classes"
      - include: "#functions"
      - include: "source.python#special-variables"
      - include: "source.python#function-name"
      - include: "#function-arguments"
  function-arguments:
    begin: (\()
    end: (?=\))(?!\)\s*\()
    beginCaptures:
      "1": { name: punctuation.definition.arguments.begin.python }
    contentName: meta.function-call.arguments.python
    patterns:
      - name: punctuation.separator.arguments.python
        match: (,)
      - match: |
          (?x)
            (?:(?<=[,(])|^) \s* (\*{1,2})
        captures:
          "1": { name: keyword.operator.unpacking.arguments.python }
      - include: "#snakemakenames"
      - include: "source.python#lambda-incomplete"
      - include: "source.python#illegal-names"
      - match: '\b([[:alpha:]_]\w*)\s*(=)(?!=)'
        captures:
          "1": { name: variable.parameter.function-call.python }
          "2": { name: keyword.operator.assignment.python }

      - name: keyword.operator.assignment.python
        match: =(?!=)
      - include: "#snakemakenames"
      - include: "#quoteall"
      - include: "source.python#expression"
      - match: \s*(\))\s*(\()
        captures:
          "1": { name: punctuation.definition.arguments.end.python }
          "2": { name: punctuation.definition.arguments.begin.python }

  quoteall:
    patterns:
      - include: "#quotessmall"
      - include: "#quotesmid"
      - include: "#quotesbig"
  quotessmall:
    begin: \(
    end: \)
    patterns:
      - include: "#quoteall"
      - include: "#snakemakenames"
      - include: "source.python"
  quotesmid:
    begin: \[
    end: \]
    patterns:
      - include: "#quoteall"
      - include: "#snakemakenames"
      - include: "source.python"
  quotesbig:
    begin: \{
    end: \}
    patterns:
      - include: "#quoteall"
      - include: "#snakemakenames"
      - include: "source.python"

  configs:
    match: >
      (?x)
        ^\s* # Leading whitespace
        ({{configs}}) # Keywords
        : # Ending in colon
    captures:
      "1": { name: keyword.control.snakemake.config }

  rules:
    match: >
      (?x)
        ^\s* # Leading whitespace
        ({{rules}}) # Keywords
        (?:\s+(\w+))? # Optional rule name
        : # Ending in colon
    captures:
      "1": { name: keyword.control.snakemake }
      "2": { name: entity.name.function.snakemake.rule }

  modules:
    match: >
      (?x)
        ^\s* # Leading whitespace
        ({{modules}}) # Keywords
        (?:\s+(\w+))? # Optional rule name
        : # Ending in colon
    captures:
      "1": { name: keyword.control.snakemake }
      "2": { name: entity.name.type.snakemake.rule }

  useruleas:
    match: >
      (?x)
        \b(use\s+rule)\s+(\w+)\s+(as)\s+(\w+)\s+(with)
        : # Ending in colon
    captures:
      "1": { name: keyword.control.snakemake }
      "2": { name: entity.name.function.snakemake.rule }
      "3": { name: keyword.control.snakemake }
      "4": { name: entity.name.function.snakemake.rule }
      "5": { name: keyword.control.snakemake }
  userulesfromas:
    match: >
      (?x)
        \b(use\s+rule)\s+(\w+|\w+\*|\*)\s+(from)\s+(\w+)\s+(as)\s+(\w+|\w+\*)
        # may end with a "with:"", but that can be caught by other rules
    captures:
      "1": { name: keyword.control.snakemake }
      "2": { name: entity.name.function.snakemake.rule }
      "3": { name: keyword.control.snakemake }
      "4": { name: entity.name.type.snakemake.rule }
      "5": { name: keyword.control.snakemake }
      "6": { name: entity.name.function.snakemake.rule }
  userulesfrom:
    match: \b(use\s+rule)\s+(\w+|\w+\*|\*)\s+(from)\s+(\w+)
    captures:
      "1": { name: keyword.control.snakemake }
      "2": { name: entity.name.function.snakemake.rule }
      "3": { name: keyword.control.snakemake }
      "4": { name: entity.name.type.snakemake.rule }

  ruleparams:
    match: >
      (?x)
        ^\s* # Leading whitespace
        ({{ruleparams}}) # Keywords
        : # Ending in colon
    captures:
      "1": { name: keyword.control.snakemake.ruleparam }
  rulerunparams:
    match: >
      (?x)
        ^\s* # Leading whitespace
        ({{rulerunparams}}) # Keywords
        : # Ending in colon
    captures:
      "1": { name: keyword.control.snakemake.rulerunparam }
  moduleparams:
    match: >
      (?x)
        ^\s* # Leading whitespace
        ({{moduleparams}}) # Keywords
        : # Ending in colon
    captures:
      "1": { name: keyword.control.snakemake.moduleparam }

  snakemakenames:
    patterns:
      - include: "#classes"
      - include: "#rulesrefernce"
      - include: "#objects"
      - include: "#ruleargargs"
      - include: "#ruleargs"
      - include: "#functions"
  classes:
    match: \b({{classes}})\b(?!\s*=)
    captures:
      "1": { name: entity.name.type.class.snakemake }
  rulesrefernce:
    name: meta.class.snakemake
    match: \b(rules|checkpoints)\s*\.\s*([A-Za-z_]+)\b(?!\s*=)
    captures:
      "1": { name: entity.name.type.class.snakemake }
      "2": { name: entity.name.variable.snakemake }
  objects:
    name: meta.c
    match: \b({{objects}})\b(?!\s*=)
    captures:
      "1": { name: entity.name.type.class.snakemake }
  ruleargargs:
    name: meta.args.snakemake
    match: \b({{ruleargs}})\s*\.\s*([A-Za-z_]+)\b(?!\s*=)
    captures:
      "1": { name: constant.language.snakemake }
      "2": { name: entity.name.variable.snakemake }
  ruleargs:
    match: \b({{ruleargs}})\b(?!\s*=)
    captures:
      "1": { name: constant.language.snakemake }
  functions:
    match: \b({{functions}})\b(?!\s*=)
    captures:
      "1": { name: support.function.builtin.snakemake }

  snakestrings:
    name: string.quoted.docstring.snakemake
    begin: \s+(\'\'\'|\"\"\"|\'|\")
    end: (\1)
    beginCaptures:
      "1": { name: punctuation.definition.string.begin.python }
    endCaptures:
      "1": { name: punctuation.definition.string.end.python }
    patterns:
      - include: "source.python#string-single-bad-brace1-formatting-unicode"
      - include: "source.python#string-single-bad-brace2-formatting-unicode"
      - include: "source.python#string-unicode-guts"
      - include: "#quotesbig"
