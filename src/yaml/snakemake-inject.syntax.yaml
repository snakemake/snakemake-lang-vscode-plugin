---
scopeName: source.python.snakemake.keywords
fileTypes: [Snakefile, smk]
injectionSelector: L:source.python.snakemake -comment -string, L:meta.function-call.arguments.python -comment -string, L:meta.function-call.python -comment -string

patterns:
  - include: "#classes"
  - include: "#rules-reference"
  - include: "#checkpoints-reference"
  - include: "#objects"
  - include: "#job-params.variable"
  - include: "#job-params"
  - include: "#functions"

repository:
  classes:
    match: (?<![\w.])\b({{classes}})\b(?!\s*=)
    captures:
      "1": { name: entity.name.type.class.snakemake }
  rules-reference:
    name: meta.rules-reference.snakemake
    match: (?<![\w.])\b(rules)(?:\s*\.\s*({{legal-name}}))?\b
    captures:
      "1": { name: entity.name.type.class.snakemake }
      "2": { name: entity.name.variable.snakemake }
  checkpoints-reference:
    name: meta.checkpoints-reference.snakemake
    match: (?<![\w.])\b(checkpoints)(?:\s*\.\s*({{legal-name}})(?:\s*\.\s*(get))?)?\b
    captures:
      "1": { name: entity.name.type.class.snakemake }
      "2": { name: entity.name.variable.snakemake }
      "3": { name: support.function.snakemake.get }
  objects:
    name: meta.objects.snakemake
    match: (?<![\w.])\b({{objects}})\b(?!\s*=)
    captures:
      "1": { name: entity.name.type.class.snakemake }
  job-params.variable:
    name: meta.args.snakemake
    match: \b({{jobparams}})\s*\.\s*({{legal-name}})\b(?!\s*=)
    captures:
      "1": { name: constant.language.snakemake.job }
      "2": { name: entity.name.variable.snakemake }
  job-params:
    match: \b({{jobparams}})\b(?!\s*=)
    captures:
      "1": { name: constant.language.snakemake.job }
  functions:
    match: (?<![\w.])\b({{functions}})\b(?!\s*=)
    captures:
      "1": { name: support.function.builtin.snakemake }
